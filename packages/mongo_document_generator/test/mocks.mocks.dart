// Mocks generated by Mockito 5.4.6 from annotations
// in mongo_document/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i13;
import 'dart:convert' as _i21;

import 'package:analyzer/dart/constant/value.dart' as _i7;
import 'package:analyzer/dart/element/element.dart' as _i2;
import 'package:analyzer/dart/element/element2.dart' as _i5;
import 'package:analyzer/dart/element/nullability_suffix.dart' as _i17;
import 'package:analyzer/dart/element/type.dart' as _i3;
import 'package:analyzer/dart/element/type_visitor.dart' as _i23;
import 'package:analyzer/source/source.dart' as _i6;
import 'package:analyzer/src/generated/engine.dart' as _i4;
import 'package:analyzer/src/generated/utilities_dart.dart' as _i15;
import 'package:build/src/analyzer/resolver.dart' as _i11;
import 'package:build/src/asset/id.dart' as _i10;
import 'package:build/src/builder/build_step.dart' as _i19;
import 'package:build/src/resource/resource.dart' as _i20;
import 'package:crypto/crypto.dart' as _i14;
import 'package:glob/glob.dart' as _i22;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i16;
import 'package:mongo_document/src/checkers/annotation_checker.dart' as _i24;
import 'package:package_config/package_config_types.dart' as _i12;
import 'package:source_gen/src/constants/reader.dart' as _i8;
import 'package:source_gen/src/constants/revive.dart' as _i9;
import 'package:source_gen/src/type_checker.dart' as _i18;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAugmentedClassElement_0 extends _i1.SmartFake
    implements _i2.AugmentedClassElement {
  _FakeAugmentedClassElement_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeInterfaceType_1 extends _i1.SmartFake implements _i3.InterfaceType {
  _FakeInterfaceType_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCompilationUnitElement_2 extends _i1.SmartFake
    implements _i2.CompilationUnitElement {
  _FakeCompilationUnitElement_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAnalysisContext_3 extends _i1.SmartFake
    implements _i4.AnalysisContext {
  _FakeAnalysisContext_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeElement_4 extends _i1.SmartFake implements _i2.Element {
  _FakeElement_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeElementKind_5 extends _i1.SmartFake implements _i5.ElementKind {
  _FakeElementKind_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLibraryElement_6 extends _i1.SmartFake
    implements _i2.LibraryElement {
  _FakeLibraryElement_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSource_7 extends _i1.SmartFake implements _i6.Source {
  _FakeSource_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDartObject_8 extends _i1.SmartFake implements _i7.DartObject {
  _FakeDartObject_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSymbol_9 extends _i1.SmartFake implements Symbol {
  _FakeSymbol_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDartType_10 extends _i1.SmartFake implements _i3.DartType {
  _FakeDartType_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConstantReader_11 extends _i1.SmartFake
    implements _i8.ConstantReader {
  _FakeConstantReader_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRevivable_12 extends _i1.SmartFake implements _i9.Revivable {
  _FakeRevivable_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAssetId_13 extends _i1.SmartFake implements _i10.AssetId {
  _FakeAssetId_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResolver_14 extends _i1.SmartFake implements _i11.Resolver {
  _FakeResolver_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePackageConfig_15 extends _i1.SmartFake
    implements _i12.PackageConfig {
  _FakePackageConfig_15(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_16<T1> extends _i1.SmartFake implements _i13.Future<T1> {
  _FakeFuture_16(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDigest_17 extends _i1.SmartFake implements _i14.Digest {
  _FakeDigest_17(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeParameterElement_18 extends _i1.SmartFake
    implements _i2.ParameterElement {
  _FakeParameterElement_18(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFormalParameterElement_19 extends _i1.SmartFake
    implements _i5.FormalParameterElement {
  _FakeFormalParameterElement_19(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeParameterKind_20 extends _i1.SmartFake
    implements _i15.ParameterKind {
  _FakeParameterKind_20(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConstructorElement_21 extends _i1.SmartFake
    implements _i2.ConstructorElement {
  _FakeConstructorElement_21(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeInterfaceElement_22 extends _i1.SmartFake
    implements _i2.InterfaceElement {
  _FakeInterfaceElement_22(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFunctionType_23 extends _i1.SmartFake implements _i3.FunctionType {
  _FakeFunctionType_23(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLibraryFragment_24 extends _i1.SmartFake
    implements _i5.LibraryFragment {
  _FakeLibraryFragment_24(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ClassElement].
///
/// See the documentation for Mockito's code generation for more information.
class MockClassElement extends _i1.Mock implements _i2.ClassElement {
  @override
  _i2.AugmentedClassElement get augmented =>
      (super.noSuchMethod(
            Invocation.getter(#augmented),
            returnValue: _FakeAugmentedClassElement_0(
              this,
              Invocation.getter(#augmented),
            ),
            returnValueForMissingStub: _FakeAugmentedClassElement_0(
              this,
              Invocation.getter(#augmented),
            ),
          )
          as _i2.AugmentedClassElement);

  @override
  bool get hasNonFinalField =>
      (super.noSuchMethod(
            Invocation.getter(#hasNonFinalField),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isAbstract =>
      (super.noSuchMethod(
            Invocation.getter(#isAbstract),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isBase =>
      (super.noSuchMethod(
            Invocation.getter(#isBase),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isConstructable =>
      (super.noSuchMethod(
            Invocation.getter(#isConstructable),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreEnum =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreEnum),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreObject =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreObject),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isExhaustive =>
      (super.noSuchMethod(
            Invocation.getter(#isExhaustive),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isFinal =>
      (super.noSuchMethod(
            Invocation.getter(#isFinal),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isInterface =>
      (super.noSuchMethod(
            Invocation.getter(#isInterface),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isMixinApplication =>
      (super.noSuchMethod(
            Invocation.getter(#isMixinApplication),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isMixinClass =>
      (super.noSuchMethod(
            Invocation.getter(#isMixinClass),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isSealed =>
      (super.noSuchMethod(
            Invocation.getter(#isSealed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isValidMixin =>
      (super.noSuchMethod(
            Invocation.getter(#isValidMixin),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  List<_i3.InterfaceType> get allSupertypes =>
      (super.noSuchMethod(
            Invocation.getter(#allSupertypes),
            returnValue: <_i3.InterfaceType>[],
            returnValueForMissingStub: <_i3.InterfaceType>[],
          )
          as List<_i3.InterfaceType>);

  @override
  List<_i2.ConstructorElement> get constructors =>
      (super.noSuchMethod(
            Invocation.getter(#constructors),
            returnValue: <_i2.ConstructorElement>[],
            returnValueForMissingStub: <_i2.ConstructorElement>[],
          )
          as List<_i2.ConstructorElement>);

  @override
  List<_i3.InterfaceType> get interfaces =>
      (super.noSuchMethod(
            Invocation.getter(#interfaces),
            returnValue: <_i3.InterfaceType>[],
            returnValueForMissingStub: <_i3.InterfaceType>[],
          )
          as List<_i3.InterfaceType>);

  @override
  List<_i3.InterfaceType> get mixins =>
      (super.noSuchMethod(
            Invocation.getter(#mixins),
            returnValue: <_i3.InterfaceType>[],
            returnValueForMissingStub: <_i3.InterfaceType>[],
          )
          as List<_i3.InterfaceType>);

  @override
  String get name =>
      (super.noSuchMethod(
            Invocation.getter(#name),
            returnValue: _i16.dummyValue<String>(
              this,
              Invocation.getter(#name),
            ),
            returnValueForMissingStub: _i16.dummyValue<String>(
              this,
              Invocation.getter(#name),
            ),
          )
          as String);

  @override
  _i3.InterfaceType get thisType =>
      (super.noSuchMethod(
            Invocation.getter(#thisType),
            returnValue: _FakeInterfaceType_1(
              this,
              Invocation.getter(#thisType),
            ),
            returnValueForMissingStub: _FakeInterfaceType_1(
              this,
              Invocation.getter(#thisType),
            ),
          )
          as _i3.InterfaceType);

  @override
  List<_i2.PropertyAccessorElement> get accessors =>
      (super.noSuchMethod(
            Invocation.getter(#accessors),
            returnValue: <_i2.PropertyAccessorElement>[],
            returnValueForMissingStub: <_i2.PropertyAccessorElement>[],
          )
          as List<_i2.PropertyAccessorElement>);

  @override
  _i2.CompilationUnitElement get enclosingElement3 =>
      (super.noSuchMethod(
            Invocation.getter(#enclosingElement3),
            returnValue: _FakeCompilationUnitElement_2(
              this,
              Invocation.getter(#enclosingElement3),
            ),
            returnValueForMissingStub: _FakeCompilationUnitElement_2(
              this,
              Invocation.getter(#enclosingElement3),
            ),
          )
          as _i2.CompilationUnitElement);

  @override
  List<_i2.FieldElement> get fields =>
      (super.noSuchMethod(
            Invocation.getter(#fields),
            returnValue: <_i2.FieldElement>[],
            returnValueForMissingStub: <_i2.FieldElement>[],
          )
          as List<_i2.FieldElement>);

  @override
  bool get isAugmentation =>
      (super.noSuchMethod(
            Invocation.getter(#isAugmentation),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  List<_i2.MethodElement> get methods =>
      (super.noSuchMethod(
            Invocation.getter(#methods),
            returnValue: <_i2.MethodElement>[],
            returnValueForMissingStub: <_i2.MethodElement>[],
          )
          as List<_i2.MethodElement>);

  @override
  List<_i2.Element> get children =>
      (super.noSuchMethod(
            Invocation.getter(#children),
            returnValue: <_i2.Element>[],
            returnValueForMissingStub: <_i2.Element>[],
          )
          as List<_i2.Element>);

  @override
  _i4.AnalysisContext get context =>
      (super.noSuchMethod(
            Invocation.getter(#context),
            returnValue: _FakeAnalysisContext_3(
              this,
              Invocation.getter(#context),
            ),
            returnValueForMissingStub: _FakeAnalysisContext_3(
              this,
              Invocation.getter(#context),
            ),
          )
          as _i4.AnalysisContext);

  @override
  _i2.Element get declaration =>
      (super.noSuchMethod(
            Invocation.getter(#declaration),
            returnValue: _FakeElement_4(this, Invocation.getter(#declaration)),
            returnValueForMissingStub: _FakeElement_4(
              this,
              Invocation.getter(#declaration),
            ),
          )
          as _i2.Element);

  @override
  String get displayName =>
      (super.noSuchMethod(
            Invocation.getter(#displayName),
            returnValue: _i16.dummyValue<String>(
              this,
              Invocation.getter(#displayName),
            ),
            returnValueForMissingStub: _i16.dummyValue<String>(
              this,
              Invocation.getter(#displayName),
            ),
          )
          as String);

  @override
  bool get hasAlwaysThrows =>
      (super.noSuchMethod(
            Invocation.getter(#hasAlwaysThrows),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasDeprecated =>
      (super.noSuchMethod(
            Invocation.getter(#hasDeprecated),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasDoNotStore =>
      (super.noSuchMethod(
            Invocation.getter(#hasDoNotStore),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasDoNotSubmit =>
      (super.noSuchMethod(
            Invocation.getter(#hasDoNotSubmit),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasFactory =>
      (super.noSuchMethod(
            Invocation.getter(#hasFactory),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasImmutable =>
      (super.noSuchMethod(
            Invocation.getter(#hasImmutable),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasInternal =>
      (super.noSuchMethod(
            Invocation.getter(#hasInternal),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasIsTest =>
      (super.noSuchMethod(
            Invocation.getter(#hasIsTest),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasIsTestGroup =>
      (super.noSuchMethod(
            Invocation.getter(#hasIsTestGroup),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasJS =>
      (super.noSuchMethod(
            Invocation.getter(#hasJS),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasLiteral =>
      (super.noSuchMethod(
            Invocation.getter(#hasLiteral),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasMustBeConst =>
      (super.noSuchMethod(
            Invocation.getter(#hasMustBeConst),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasMustBeOverridden =>
      (super.noSuchMethod(
            Invocation.getter(#hasMustBeOverridden),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasMustCallSuper =>
      (super.noSuchMethod(
            Invocation.getter(#hasMustCallSuper),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasNonVirtual =>
      (super.noSuchMethod(
            Invocation.getter(#hasNonVirtual),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasOptionalTypeArgs =>
      (super.noSuchMethod(
            Invocation.getter(#hasOptionalTypeArgs),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasOverride =>
      (super.noSuchMethod(
            Invocation.getter(#hasOverride),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasProtected =>
      (super.noSuchMethod(
            Invocation.getter(#hasProtected),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasRedeclare =>
      (super.noSuchMethod(
            Invocation.getter(#hasRedeclare),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasReopen =>
      (super.noSuchMethod(
            Invocation.getter(#hasReopen),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasRequired =>
      (super.noSuchMethod(
            Invocation.getter(#hasRequired),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasSealed =>
      (super.noSuchMethod(
            Invocation.getter(#hasSealed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasUseResult =>
      (super.noSuchMethod(
            Invocation.getter(#hasUseResult),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasVisibleForOverriding =>
      (super.noSuchMethod(
            Invocation.getter(#hasVisibleForOverriding),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasVisibleForTemplate =>
      (super.noSuchMethod(
            Invocation.getter(#hasVisibleForTemplate),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasVisibleForTesting =>
      (super.noSuchMethod(
            Invocation.getter(#hasVisibleForTesting),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasVisibleOutsideTemplate =>
      (super.noSuchMethod(
            Invocation.getter(#hasVisibleOutsideTemplate),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  int get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  bool get isPrivate =>
      (super.noSuchMethod(
            Invocation.getter(#isPrivate),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isPublic =>
      (super.noSuchMethod(
            Invocation.getter(#isPublic),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isSynthetic =>
      (super.noSuchMethod(
            Invocation.getter(#isSynthetic),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i5.ElementKind get kind =>
      (super.noSuchMethod(
            Invocation.getter(#kind),
            returnValue: _FakeElementKind_5(this, Invocation.getter(#kind)),
            returnValueForMissingStub: _FakeElementKind_5(
              this,
              Invocation.getter(#kind),
            ),
          )
          as _i5.ElementKind);

  @override
  _i2.LibraryElement get library =>
      (super.noSuchMethod(
            Invocation.getter(#library),
            returnValue: _FakeLibraryElement_6(
              this,
              Invocation.getter(#library),
            ),
            returnValueForMissingStub: _FakeLibraryElement_6(
              this,
              Invocation.getter(#library),
            ),
          )
          as _i2.LibraryElement);

  @override
  List<_i5.ElementAnnotation> get metadata =>
      (super.noSuchMethod(
            Invocation.getter(#metadata),
            returnValue: <_i5.ElementAnnotation>[],
            returnValueForMissingStub: <_i5.ElementAnnotation>[],
          )
          as List<_i5.ElementAnnotation>);

  @override
  int get nameLength =>
      (super.noSuchMethod(
            Invocation.getter(#nameLength),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  int get nameOffset =>
      (super.noSuchMethod(
            Invocation.getter(#nameOffset),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  _i2.Element get nonSynthetic =>
      (super.noSuchMethod(
            Invocation.getter(#nonSynthetic),
            returnValue: _FakeElement_4(this, Invocation.getter(#nonSynthetic)),
            returnValueForMissingStub: _FakeElement_4(
              this,
              Invocation.getter(#nonSynthetic),
            ),
          )
          as _i2.Element);

  @override
  _i6.Source get source =>
      (super.noSuchMethod(
            Invocation.getter(#source),
            returnValue: _FakeSource_7(this, Invocation.getter(#source)),
            returnValueForMissingStub: _FakeSource_7(
              this,
              Invocation.getter(#source),
            ),
          )
          as _i6.Source);

  @override
  _i6.Source get librarySource =>
      (super.noSuchMethod(
            Invocation.getter(#librarySource),
            returnValue: _FakeSource_7(this, Invocation.getter(#librarySource)),
            returnValueForMissingStub: _FakeSource_7(
              this,
              Invocation.getter(#librarySource),
            ),
          )
          as _i6.Source);

  @override
  bool get isSimplyBounded =>
      (super.noSuchMethod(
            Invocation.getter(#isSimplyBounded),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  List<_i2.TypeParameterElement> get typeParameters =>
      (super.noSuchMethod(
            Invocation.getter(#typeParameters),
            returnValue: <_i2.TypeParameterElement>[],
            returnValueForMissingStub: <_i2.TypeParameterElement>[],
          )
          as List<_i2.TypeParameterElement>);

  @override
  bool isExtendableIn(_i2.LibraryElement? library) =>
      (super.noSuchMethod(
            Invocation.method(#isExtendableIn, [library]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool isImplementableIn(_i2.LibraryElement? library) =>
      (super.noSuchMethod(
            Invocation.method(#isImplementableIn, [library]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool isMixableIn(_i2.LibraryElement? library) =>
      (super.noSuchMethod(
            Invocation.method(#isMixableIn, [library]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i2.FieldElement? getField(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#getField, [name]),
            returnValueForMissingStub: null,
          )
          as _i2.FieldElement?);

  @override
  _i2.PropertyAccessorElement? getGetter(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#getGetter, [name]),
            returnValueForMissingStub: null,
          )
          as _i2.PropertyAccessorElement?);

  @override
  _i2.MethodElement? getMethod(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#getMethod, [name]),
            returnValueForMissingStub: null,
          )
          as _i2.MethodElement?);

  @override
  _i2.ConstructorElement? getNamedConstructor(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#getNamedConstructor, [name]),
            returnValueForMissingStub: null,
          )
          as _i2.ConstructorElement?);

  @override
  _i2.PropertyAccessorElement? getSetter(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#getSetter, [name]),
            returnValueForMissingStub: null,
          )
          as _i2.PropertyAccessorElement?);

  @override
  _i3.InterfaceType instantiate({
    required List<_i3.DartType>? typeArguments,
    required _i17.NullabilitySuffix? nullabilitySuffix,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#instantiate, [], {
              #typeArguments: typeArguments,
              #nullabilitySuffix: nullabilitySuffix,
            }),
            returnValue: _FakeInterfaceType_1(
              this,
              Invocation.method(#instantiate, [], {
                #typeArguments: typeArguments,
                #nullabilitySuffix: nullabilitySuffix,
              }),
            ),
            returnValueForMissingStub: _FakeInterfaceType_1(
              this,
              Invocation.method(#instantiate, [], {
                #typeArguments: typeArguments,
                #nullabilitySuffix: nullabilitySuffix,
              }),
            ),
          )
          as _i3.InterfaceType);

  @override
  _i2.MethodElement? lookUpConcreteMethod(
    String? methodName,
    _i2.LibraryElement? library,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#lookUpConcreteMethod, [methodName, library]),
            returnValueForMissingStub: null,
          )
          as _i2.MethodElement?);

  @override
  _i2.PropertyAccessorElement? lookUpGetter(
    String? getterName,
    _i2.LibraryElement? library,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#lookUpGetter, [getterName, library]),
            returnValueForMissingStub: null,
          )
          as _i2.PropertyAccessorElement?);

  @override
  _i2.PropertyAccessorElement? lookUpInheritedConcreteGetter(
    String? getterName,
    _i2.LibraryElement? library,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#lookUpInheritedConcreteGetter, [
              getterName,
              library,
            ]),
            returnValueForMissingStub: null,
          )
          as _i2.PropertyAccessorElement?);

  @override
  _i2.MethodElement? lookUpInheritedConcreteMethod(
    String? methodName,
    _i2.LibraryElement? library,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#lookUpInheritedConcreteMethod, [
              methodName,
              library,
            ]),
            returnValueForMissingStub: null,
          )
          as _i2.MethodElement?);

  @override
  _i2.PropertyAccessorElement? lookUpInheritedConcreteSetter(
    String? setterName,
    _i2.LibraryElement? library,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#lookUpInheritedConcreteSetter, [
              setterName,
              library,
            ]),
            returnValueForMissingStub: null,
          )
          as _i2.PropertyAccessorElement?);

  @override
  _i2.MethodElement? lookUpInheritedMethod(
    String? methodName,
    _i2.LibraryElement? library,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#lookUpInheritedMethod, [methodName, library]),
            returnValueForMissingStub: null,
          )
          as _i2.MethodElement?);

  @override
  _i2.MethodElement? lookUpMethod(
    String? methodName,
    _i2.LibraryElement? library,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#lookUpMethod, [methodName, library]),
            returnValueForMissingStub: null,
          )
          as _i2.MethodElement?);

  @override
  _i2.PropertyAccessorElement? lookUpSetter(
    String? setterName,
    _i2.LibraryElement? library,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#lookUpSetter, [setterName, library]),
            returnValueForMissingStub: null,
          )
          as _i2.PropertyAccessorElement?);

  @override
  T? accept<T>(_i2.ElementVisitor<T>? visitor) =>
      (super.noSuchMethod(
            Invocation.method(#accept, [visitor]),
            returnValueForMissingStub: null,
          )
          as T?);

  @override
  String getDisplayString({
    bool? withNullability = true,
    bool? multiline = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getDisplayString, [], {
              #withNullability: withNullability,
              #multiline: multiline,
            }),
            returnValue: _i16.dummyValue<String>(
              this,
              Invocation.method(#getDisplayString, [], {
                #withNullability: withNullability,
                #multiline: multiline,
              }),
            ),
            returnValueForMissingStub: _i16.dummyValue<String>(
              this,
              Invocation.method(#getDisplayString, [], {
                #withNullability: withNullability,
                #multiline: multiline,
              }),
            ),
          )
          as String);

  @override
  String getExtendedDisplayName(String? shortName) =>
      (super.noSuchMethod(
            Invocation.method(#getExtendedDisplayName, [shortName]),
            returnValue: _i16.dummyValue<String>(
              this,
              Invocation.method(#getExtendedDisplayName, [shortName]),
            ),
            returnValueForMissingStub: _i16.dummyValue<String>(
              this,
              Invocation.method(#getExtendedDisplayName, [shortName]),
            ),
          )
          as String);

  @override
  bool isAccessibleIn(_i2.LibraryElement? library) =>
      (super.noSuchMethod(
            Invocation.method(#isAccessibleIn, [library]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  E? thisOrAncestorMatching<E extends _i2.Element>(
    bool Function(_i2.Element)? predicate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#thisOrAncestorMatching, [predicate]),
            returnValueForMissingStub: null,
          )
          as E?);

  @override
  E? thisOrAncestorMatching3<E extends _i2.Element>(
    bool Function(_i2.Element)? predicate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#thisOrAncestorMatching3, [predicate]),
            returnValueForMissingStub: null,
          )
          as E?);

  @override
  void visitChildren(_i2.ElementVisitor<dynamic>? visitor) =>
      super.noSuchMethod(
        Invocation.method(#visitChildren, [visitor]),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ConstantReader].
///
/// See the documentation for Mockito's code generation for more information.
class MockConstantReader extends _i1.Mock implements _i8.ConstantReader {
  @override
  bool get isLiteral =>
      (super.noSuchMethod(
            Invocation.getter(#isLiteral),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i7.DartObject get objectValue =>
      (super.noSuchMethod(
            Invocation.getter(#objectValue),
            returnValue: _FakeDartObject_8(
              this,
              Invocation.getter(#objectValue),
            ),
            returnValueForMissingStub: _FakeDartObject_8(
              this,
              Invocation.getter(#objectValue),
            ),
          )
          as _i7.DartObject);

  @override
  bool get isNull =>
      (super.noSuchMethod(
            Invocation.getter(#isNull),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isBool =>
      (super.noSuchMethod(
            Invocation.getter(#isBool),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get boolValue =>
      (super.noSuchMethod(
            Invocation.getter(#boolValue),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isInt =>
      (super.noSuchMethod(
            Invocation.getter(#isInt),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  int get intValue =>
      (super.noSuchMethod(
            Invocation.getter(#intValue),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  bool get isDouble =>
      (super.noSuchMethod(
            Invocation.getter(#isDouble),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  double get doubleValue =>
      (super.noSuchMethod(
            Invocation.getter(#doubleValue),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  bool get isString =>
      (super.noSuchMethod(
            Invocation.getter(#isString),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  String get stringValue =>
      (super.noSuchMethod(
            Invocation.getter(#stringValue),
            returnValue: _i16.dummyValue<String>(
              this,
              Invocation.getter(#stringValue),
            ),
            returnValueForMissingStub: _i16.dummyValue<String>(
              this,
              Invocation.getter(#stringValue),
            ),
          )
          as String);

  @override
  bool get isSymbol =>
      (super.noSuchMethod(
            Invocation.getter(#isSymbol),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  Symbol get symbolValue =>
      (super.noSuchMethod(
            Invocation.getter(#symbolValue),
            returnValue: _FakeSymbol_9(this, Invocation.getter(#symbolValue)),
            returnValueForMissingStub: _FakeSymbol_9(
              this,
              Invocation.getter(#symbolValue),
            ),
          )
          as Symbol);

  @override
  bool get isType =>
      (super.noSuchMethod(
            Invocation.getter(#isType),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i3.DartType get typeValue =>
      (super.noSuchMethod(
            Invocation.getter(#typeValue),
            returnValue: _FakeDartType_10(this, Invocation.getter(#typeValue)),
            returnValueForMissingStub: _FakeDartType_10(
              this,
              Invocation.getter(#typeValue),
            ),
          )
          as _i3.DartType);

  @override
  bool get isMap =>
      (super.noSuchMethod(
            Invocation.getter(#isMap),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  Map<_i7.DartObject?, _i7.DartObject?> get mapValue =>
      (super.noSuchMethod(
            Invocation.getter(#mapValue),
            returnValue: <_i7.DartObject?, _i7.DartObject?>{},
            returnValueForMissingStub: <_i7.DartObject?, _i7.DartObject?>{},
          )
          as Map<_i7.DartObject?, _i7.DartObject?>);

  @override
  bool get isList =>
      (super.noSuchMethod(
            Invocation.getter(#isList),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  List<_i7.DartObject> get listValue =>
      (super.noSuchMethod(
            Invocation.getter(#listValue),
            returnValue: <_i7.DartObject>[],
            returnValueForMissingStub: <_i7.DartObject>[],
          )
          as List<_i7.DartObject>);

  @override
  bool get isSet =>
      (super.noSuchMethod(
            Invocation.getter(#isSet),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  Set<_i7.DartObject> get setValue =>
      (super.noSuchMethod(
            Invocation.getter(#setValue),
            returnValue: <_i7.DartObject>{},
            returnValueForMissingStub: <_i7.DartObject>{},
          )
          as Set<_i7.DartObject>);

  @override
  bool instanceOf(_i18.TypeChecker? checker) =>
      (super.noSuchMethod(
            Invocation.method(#instanceOf, [checker]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i8.ConstantReader read(String? field) =>
      (super.noSuchMethod(
            Invocation.method(#read, [field]),
            returnValue: _FakeConstantReader_11(
              this,
              Invocation.method(#read, [field]),
            ),
            returnValueForMissingStub: _FakeConstantReader_11(
              this,
              Invocation.method(#read, [field]),
            ),
          )
          as _i8.ConstantReader);

  @override
  _i8.ConstantReader? peek(String? field) =>
      (super.noSuchMethod(
            Invocation.method(#peek, [field]),
            returnValueForMissingStub: null,
          )
          as _i8.ConstantReader?);

  @override
  _i9.Revivable revive() =>
      (super.noSuchMethod(
            Invocation.method(#revive, []),
            returnValue: _FakeRevivable_12(
              this,
              Invocation.method(#revive, []),
            ),
            returnValueForMissingStub: _FakeRevivable_12(
              this,
              Invocation.method(#revive, []),
            ),
          )
          as _i9.Revivable);
}

/// A class which mocks [DartObject].
///
/// See the documentation for Mockito's code generation for more information.
class MockDartObject extends _i1.Mock implements _i7.DartObject {
  @override
  bool get hasKnownValue =>
      (super.noSuchMethod(
            Invocation.getter(#hasKnownValue),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isNull =>
      (super.noSuchMethod(
            Invocation.getter(#isNull),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i7.DartObject? getField(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#getField, [name]),
            returnValueForMissingStub: null,
          )
          as _i7.DartObject?);
}

/// A class which mocks [BuildStep].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildStep extends _i1.Mock implements _i19.BuildStep {
  @override
  _i10.AssetId get inputId =>
      (super.noSuchMethod(
            Invocation.getter(#inputId),
            returnValue: _FakeAssetId_13(this, Invocation.getter(#inputId)),
            returnValueForMissingStub: _FakeAssetId_13(
              this,
              Invocation.getter(#inputId),
            ),
          )
          as _i10.AssetId);

  @override
  _i13.Future<_i2.LibraryElement> get inputLibrary =>
      (super.noSuchMethod(
            Invocation.getter(#inputLibrary),
            returnValue: _i13.Future<_i2.LibraryElement>.value(
              _FakeLibraryElement_6(this, Invocation.getter(#inputLibrary)),
            ),
            returnValueForMissingStub: _i13.Future<_i2.LibraryElement>.value(
              _FakeLibraryElement_6(this, Invocation.getter(#inputLibrary)),
            ),
          )
          as _i13.Future<_i2.LibraryElement>);

  @override
  _i11.Resolver get resolver =>
      (super.noSuchMethod(
            Invocation.getter(#resolver),
            returnValue: _FakeResolver_14(this, Invocation.getter(#resolver)),
            returnValueForMissingStub: _FakeResolver_14(
              this,
              Invocation.getter(#resolver),
            ),
          )
          as _i11.Resolver);

  @override
  Iterable<_i10.AssetId> get allowedOutputs =>
      (super.noSuchMethod(
            Invocation.getter(#allowedOutputs),
            returnValue: <_i10.AssetId>[],
            returnValueForMissingStub: <_i10.AssetId>[],
          )
          as Iterable<_i10.AssetId>);

  @override
  _i13.Future<_i12.PackageConfig> get packageConfig =>
      (super.noSuchMethod(
            Invocation.getter(#packageConfig),
            returnValue: _i13.Future<_i12.PackageConfig>.value(
              _FakePackageConfig_15(this, Invocation.getter(#packageConfig)),
            ),
            returnValueForMissingStub: _i13.Future<_i12.PackageConfig>.value(
              _FakePackageConfig_15(this, Invocation.getter(#packageConfig)),
            ),
          )
          as _i13.Future<_i12.PackageConfig>);

  @override
  _i13.Future<T> fetchResource<T>(_i20.Resource<T>? resource) =>
      (super.noSuchMethod(
            Invocation.method(#fetchResource, [resource]),
            returnValue:
                _i16.ifNotNull(
                  _i16.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#fetchResource, [resource]),
                  ),
                  (T v) => _i13.Future<T>.value(v),
                ) ??
                _FakeFuture_16<T>(
                  this,
                  Invocation.method(#fetchResource, [resource]),
                ),
            returnValueForMissingStub:
                _i16.ifNotNull(
                  _i16.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#fetchResource, [resource]),
                  ),
                  (T v) => _i13.Future<T>.value(v),
                ) ??
                _FakeFuture_16<T>(
                  this,
                  Invocation.method(#fetchResource, [resource]),
                ),
          )
          as _i13.Future<T>);

  @override
  _i13.Future<void> writeAsBytes(
    _i10.AssetId? id,
    _i13.FutureOr<List<int>>? bytes,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#writeAsBytes, [id, bytes]),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);

  @override
  _i13.Future<void> writeAsString(
    _i10.AssetId? id,
    _i13.FutureOr<String>? contents, {
    _i21.Encoding? encoding = const _i21.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #writeAsString,
              [id, contents],
              {#encoding: encoding},
            ),
            returnValue: _i13.Future<void>.value(),
            returnValueForMissingStub: _i13.Future<void>.value(),
          )
          as _i13.Future<void>);

  @override
  T trackStage<T>(
    String? label,
    T Function()? action, {
    bool? isExternal = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #trackStage,
              [label, action],
              {#isExternal: isExternal},
            ),
            returnValue: _i16.dummyValue<T>(
              this,
              Invocation.method(
                #trackStage,
                [label, action],
                {#isExternal: isExternal},
              ),
            ),
            returnValueForMissingStub: _i16.dummyValue<T>(
              this,
              Invocation.method(
                #trackStage,
                [label, action],
                {#isExternal: isExternal},
              ),
            ),
          )
          as T);

  @override
  void reportUnusedAssets(Iterable<_i10.AssetId>? ids) => super.noSuchMethod(
    Invocation.method(#reportUnusedAssets, [ids]),
    returnValueForMissingStub: null,
  );

  @override
  _i13.Future<List<int>> readAsBytes(_i10.AssetId? id) =>
      (super.noSuchMethod(
            Invocation.method(#readAsBytes, [id]),
            returnValue: _i13.Future<List<int>>.value(<int>[]),
            returnValueForMissingStub: _i13.Future<List<int>>.value(<int>[]),
          )
          as _i13.Future<List<int>>);

  @override
  _i13.Future<String> readAsString(
    _i10.AssetId? id, {
    _i21.Encoding? encoding = const _i21.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readAsString, [id], {#encoding: encoding}),
            returnValue: _i13.Future<String>.value(
              _i16.dummyValue<String>(
                this,
                Invocation.method(#readAsString, [id], {#encoding: encoding}),
              ),
            ),
            returnValueForMissingStub: _i13.Future<String>.value(
              _i16.dummyValue<String>(
                this,
                Invocation.method(#readAsString, [id], {#encoding: encoding}),
              ),
            ),
          )
          as _i13.Future<String>);

  @override
  _i13.Future<bool> canRead(_i10.AssetId? id) =>
      (super.noSuchMethod(
            Invocation.method(#canRead, [id]),
            returnValue: _i13.Future<bool>.value(false),
            returnValueForMissingStub: _i13.Future<bool>.value(false),
          )
          as _i13.Future<bool>);

  @override
  _i13.Stream<_i10.AssetId> findAssets(_i22.Glob? glob) =>
      (super.noSuchMethod(
            Invocation.method(#findAssets, [glob]),
            returnValue: _i13.Stream<_i10.AssetId>.empty(),
            returnValueForMissingStub: _i13.Stream<_i10.AssetId>.empty(),
          )
          as _i13.Stream<_i10.AssetId>);

  @override
  _i13.Future<_i14.Digest> digest(_i10.AssetId? id) =>
      (super.noSuchMethod(
            Invocation.method(#digest, [id]),
            returnValue: _i13.Future<_i14.Digest>.value(
              _FakeDigest_17(this, Invocation.method(#digest, [id])),
            ),
            returnValueForMissingStub: _i13.Future<_i14.Digest>.value(
              _FakeDigest_17(this, Invocation.method(#digest, [id])),
            ),
          )
          as _i13.Future<_i14.Digest>);
}

/// A class which mocks [ParameterElement].
///
/// See the documentation for Mockito's code generation for more information.
class MockParameterElement extends _i1.Mock implements _i2.ParameterElement {
  @override
  _i2.ParameterElement get declaration =>
      (super.noSuchMethod(
            Invocation.getter(#declaration),
            returnValue: _FakeParameterElement_18(
              this,
              Invocation.getter(#declaration),
            ),
            returnValueForMissingStub: _FakeParameterElement_18(
              this,
              Invocation.getter(#declaration),
            ),
          )
          as _i2.ParameterElement);

  @override
  _i5.FormalParameterElement get element =>
      (super.noSuchMethod(
            Invocation.getter(#element),
            returnValue: _FakeFormalParameterElement_19(
              this,
              Invocation.getter(#element),
            ),
            returnValueForMissingStub: _FakeFormalParameterElement_19(
              this,
              Invocation.getter(#element),
            ),
          )
          as _i5.FormalParameterElement);

  @override
  bool get hasDefaultValue =>
      (super.noSuchMethod(
            Invocation.getter(#hasDefaultValue),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isCovariant =>
      (super.noSuchMethod(
            Invocation.getter(#isCovariant),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isInitializingFormal =>
      (super.noSuchMethod(
            Invocation.getter(#isInitializingFormal),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isNamed =>
      (super.noSuchMethod(
            Invocation.getter(#isNamed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isOptional =>
      (super.noSuchMethod(
            Invocation.getter(#isOptional),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isOptionalNamed =>
      (super.noSuchMethod(
            Invocation.getter(#isOptionalNamed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isOptionalPositional =>
      (super.noSuchMethod(
            Invocation.getter(#isOptionalPositional),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isPositional =>
      (super.noSuchMethod(
            Invocation.getter(#isPositional),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isRequired =>
      (super.noSuchMethod(
            Invocation.getter(#isRequired),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isRequiredNamed =>
      (super.noSuchMethod(
            Invocation.getter(#isRequiredNamed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isRequiredPositional =>
      (super.noSuchMethod(
            Invocation.getter(#isRequiredPositional),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isSuperFormal =>
      (super.noSuchMethod(
            Invocation.getter(#isSuperFormal),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  String get name =>
      (super.noSuchMethod(
            Invocation.getter(#name),
            returnValue: _i16.dummyValue<String>(
              this,
              Invocation.getter(#name),
            ),
            returnValueForMissingStub: _i16.dummyValue<String>(
              this,
              Invocation.getter(#name),
            ),
          )
          as String);

  @override
  _i15.ParameterKind get parameterKind =>
      (super.noSuchMethod(
            Invocation.getter(#parameterKind),
            returnValue: _FakeParameterKind_20(
              this,
              Invocation.getter(#parameterKind),
            ),
            returnValueForMissingStub: _FakeParameterKind_20(
              this,
              Invocation.getter(#parameterKind),
            ),
          )
          as _i15.ParameterKind);

  @override
  List<_i2.ParameterElement> get parameters =>
      (super.noSuchMethod(
            Invocation.getter(#parameters),
            returnValue: <_i2.ParameterElement>[],
            returnValueForMissingStub: <_i2.ParameterElement>[],
          )
          as List<_i2.ParameterElement>);

  @override
  List<_i2.TypeParameterElement> get typeParameters =>
      (super.noSuchMethod(
            Invocation.getter(#typeParameters),
            returnValue: <_i2.TypeParameterElement>[],
            returnValueForMissingStub: <_i2.TypeParameterElement>[],
          )
          as List<_i2.TypeParameterElement>);

  @override
  List<_i2.Element> get children =>
      (super.noSuchMethod(
            Invocation.getter(#children),
            returnValue: <_i2.Element>[],
            returnValueForMissingStub: <_i2.Element>[],
          )
          as List<_i2.Element>);

  @override
  _i4.AnalysisContext get context =>
      (super.noSuchMethod(
            Invocation.getter(#context),
            returnValue: _FakeAnalysisContext_3(
              this,
              Invocation.getter(#context),
            ),
            returnValueForMissingStub: _FakeAnalysisContext_3(
              this,
              Invocation.getter(#context),
            ),
          )
          as _i4.AnalysisContext);

  @override
  String get displayName =>
      (super.noSuchMethod(
            Invocation.getter(#displayName),
            returnValue: _i16.dummyValue<String>(
              this,
              Invocation.getter(#displayName),
            ),
            returnValueForMissingStub: _i16.dummyValue<String>(
              this,
              Invocation.getter(#displayName),
            ),
          )
          as String);

  @override
  bool get hasAlwaysThrows =>
      (super.noSuchMethod(
            Invocation.getter(#hasAlwaysThrows),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasDeprecated =>
      (super.noSuchMethod(
            Invocation.getter(#hasDeprecated),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasDoNotStore =>
      (super.noSuchMethod(
            Invocation.getter(#hasDoNotStore),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasDoNotSubmit =>
      (super.noSuchMethod(
            Invocation.getter(#hasDoNotSubmit),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasFactory =>
      (super.noSuchMethod(
            Invocation.getter(#hasFactory),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasImmutable =>
      (super.noSuchMethod(
            Invocation.getter(#hasImmutable),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasInternal =>
      (super.noSuchMethod(
            Invocation.getter(#hasInternal),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasIsTest =>
      (super.noSuchMethod(
            Invocation.getter(#hasIsTest),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasIsTestGroup =>
      (super.noSuchMethod(
            Invocation.getter(#hasIsTestGroup),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasJS =>
      (super.noSuchMethod(
            Invocation.getter(#hasJS),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasLiteral =>
      (super.noSuchMethod(
            Invocation.getter(#hasLiteral),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasMustBeConst =>
      (super.noSuchMethod(
            Invocation.getter(#hasMustBeConst),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasMustBeOverridden =>
      (super.noSuchMethod(
            Invocation.getter(#hasMustBeOverridden),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasMustCallSuper =>
      (super.noSuchMethod(
            Invocation.getter(#hasMustCallSuper),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasNonVirtual =>
      (super.noSuchMethod(
            Invocation.getter(#hasNonVirtual),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasOptionalTypeArgs =>
      (super.noSuchMethod(
            Invocation.getter(#hasOptionalTypeArgs),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasOverride =>
      (super.noSuchMethod(
            Invocation.getter(#hasOverride),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasProtected =>
      (super.noSuchMethod(
            Invocation.getter(#hasProtected),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasRedeclare =>
      (super.noSuchMethod(
            Invocation.getter(#hasRedeclare),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasReopen =>
      (super.noSuchMethod(
            Invocation.getter(#hasReopen),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasRequired =>
      (super.noSuchMethod(
            Invocation.getter(#hasRequired),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasSealed =>
      (super.noSuchMethod(
            Invocation.getter(#hasSealed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasUseResult =>
      (super.noSuchMethod(
            Invocation.getter(#hasUseResult),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasVisibleForOverriding =>
      (super.noSuchMethod(
            Invocation.getter(#hasVisibleForOverriding),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasVisibleForTemplate =>
      (super.noSuchMethod(
            Invocation.getter(#hasVisibleForTemplate),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasVisibleForTesting =>
      (super.noSuchMethod(
            Invocation.getter(#hasVisibleForTesting),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasVisibleOutsideTemplate =>
      (super.noSuchMethod(
            Invocation.getter(#hasVisibleOutsideTemplate),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  int get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  bool get isPrivate =>
      (super.noSuchMethod(
            Invocation.getter(#isPrivate),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isPublic =>
      (super.noSuchMethod(
            Invocation.getter(#isPublic),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isSynthetic =>
      (super.noSuchMethod(
            Invocation.getter(#isSynthetic),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i5.ElementKind get kind =>
      (super.noSuchMethod(
            Invocation.getter(#kind),
            returnValue: _FakeElementKind_5(this, Invocation.getter(#kind)),
            returnValueForMissingStub: _FakeElementKind_5(
              this,
              Invocation.getter(#kind),
            ),
          )
          as _i5.ElementKind);

  @override
  List<_i5.ElementAnnotation> get metadata =>
      (super.noSuchMethod(
            Invocation.getter(#metadata),
            returnValue: <_i5.ElementAnnotation>[],
            returnValueForMissingStub: <_i5.ElementAnnotation>[],
          )
          as List<_i5.ElementAnnotation>);

  @override
  int get nameLength =>
      (super.noSuchMethod(
            Invocation.getter(#nameLength),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  int get nameOffset =>
      (super.noSuchMethod(
            Invocation.getter(#nameOffset),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  _i2.Element get nonSynthetic =>
      (super.noSuchMethod(
            Invocation.getter(#nonSynthetic),
            returnValue: _FakeElement_4(this, Invocation.getter(#nonSynthetic)),
            returnValueForMissingStub: _FakeElement_4(
              this,
              Invocation.getter(#nonSynthetic),
            ),
          )
          as _i2.Element);

  @override
  bool get hasImplicitType =>
      (super.noSuchMethod(
            Invocation.getter(#hasImplicitType),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isConst =>
      (super.noSuchMethod(
            Invocation.getter(#isConst),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isFinal =>
      (super.noSuchMethod(
            Invocation.getter(#isFinal),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isLate =>
      (super.noSuchMethod(
            Invocation.getter(#isLate),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isStatic =>
      (super.noSuchMethod(
            Invocation.getter(#isStatic),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i3.DartType get type =>
      (super.noSuchMethod(
            Invocation.getter(#type),
            returnValue: _FakeDartType_10(this, Invocation.getter(#type)),
            returnValueForMissingStub: _FakeDartType_10(
              this,
              Invocation.getter(#type),
            ),
          )
          as _i3.DartType);

  @override
  bool get isConstantEvaluated =>
      (super.noSuchMethod(
            Invocation.getter(#isConstantEvaluated),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void appendToWithoutDelimiters(
    StringBuffer? buffer, {
    bool? withNullability = true,
  }) => super.noSuchMethod(
    Invocation.method(
      #appendToWithoutDelimiters,
      [buffer],
      {#withNullability: withNullability},
    ),
    returnValueForMissingStub: null,
  );

  @override
  T? accept<T>(_i2.ElementVisitor<T>? visitor) =>
      (super.noSuchMethod(
            Invocation.method(#accept, [visitor]),
            returnValueForMissingStub: null,
          )
          as T?);

  @override
  String getDisplayString({
    bool? withNullability = true,
    bool? multiline = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getDisplayString, [], {
              #withNullability: withNullability,
              #multiline: multiline,
            }),
            returnValue: _i16.dummyValue<String>(
              this,
              Invocation.method(#getDisplayString, [], {
                #withNullability: withNullability,
                #multiline: multiline,
              }),
            ),
            returnValueForMissingStub: _i16.dummyValue<String>(
              this,
              Invocation.method(#getDisplayString, [], {
                #withNullability: withNullability,
                #multiline: multiline,
              }),
            ),
          )
          as String);

  @override
  String getExtendedDisplayName(String? shortName) =>
      (super.noSuchMethod(
            Invocation.method(#getExtendedDisplayName, [shortName]),
            returnValue: _i16.dummyValue<String>(
              this,
              Invocation.method(#getExtendedDisplayName, [shortName]),
            ),
            returnValueForMissingStub: _i16.dummyValue<String>(
              this,
              Invocation.method(#getExtendedDisplayName, [shortName]),
            ),
          )
          as String);

  @override
  bool isAccessibleIn(_i2.LibraryElement? library) =>
      (super.noSuchMethod(
            Invocation.method(#isAccessibleIn, [library]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  E? thisOrAncestorMatching<E extends _i2.Element>(
    bool Function(_i2.Element)? predicate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#thisOrAncestorMatching, [predicate]),
            returnValueForMissingStub: null,
          )
          as E?);

  @override
  E? thisOrAncestorMatching3<E extends _i2.Element>(
    bool Function(_i2.Element)? predicate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#thisOrAncestorMatching3, [predicate]),
            returnValueForMissingStub: null,
          )
          as E?);

  @override
  void visitChildren(_i2.ElementVisitor<dynamic>? visitor) =>
      super.noSuchMethod(
        Invocation.method(#visitChildren, [visitor]),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ConstructorElement].
///
/// See the documentation for Mockito's code generation for more information.
class MockConstructorElement extends _i1.Mock
    implements _i2.ConstructorElement {
  @override
  _i2.ConstructorElement get declaration =>
      (super.noSuchMethod(
            Invocation.getter(#declaration),
            returnValue: _FakeConstructorElement_21(
              this,
              Invocation.getter(#declaration),
            ),
            returnValueForMissingStub: _FakeConstructorElement_21(
              this,
              Invocation.getter(#declaration),
            ),
          )
          as _i2.ConstructorElement);

  @override
  String get displayName =>
      (super.noSuchMethod(
            Invocation.getter(#displayName),
            returnValue: _i16.dummyValue<String>(
              this,
              Invocation.getter(#displayName),
            ),
            returnValueForMissingStub: _i16.dummyValue<String>(
              this,
              Invocation.getter(#displayName),
            ),
          )
          as String);

  @override
  _i2.InterfaceElement get enclosingElement3 =>
      (super.noSuchMethod(
            Invocation.getter(#enclosingElement3),
            returnValue: _FakeInterfaceElement_22(
              this,
              Invocation.getter(#enclosingElement3),
            ),
            returnValueForMissingStub: _FakeInterfaceElement_22(
              this,
              Invocation.getter(#enclosingElement3),
            ),
          )
          as _i2.InterfaceElement);

  @override
  bool get isConst =>
      (super.noSuchMethod(
            Invocation.getter(#isConst),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDefaultConstructor =>
      (super.noSuchMethod(
            Invocation.getter(#isDefaultConstructor),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isFactory =>
      (super.noSuchMethod(
            Invocation.getter(#isFactory),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isGenerative =>
      (super.noSuchMethod(
            Invocation.getter(#isGenerative),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  String get name =>
      (super.noSuchMethod(
            Invocation.getter(#name),
            returnValue: _i16.dummyValue<String>(
              this,
              Invocation.getter(#name),
            ),
            returnValueForMissingStub: _i16.dummyValue<String>(
              this,
              Invocation.getter(#name),
            ),
          )
          as String);

  @override
  _i3.InterfaceType get returnType =>
      (super.noSuchMethod(
            Invocation.getter(#returnType),
            returnValue: _FakeInterfaceType_1(
              this,
              Invocation.getter(#returnType),
            ),
            returnValueForMissingStub: _FakeInterfaceType_1(
              this,
              Invocation.getter(#returnType),
            ),
          )
          as _i3.InterfaceType);

  @override
  bool get isStatic =>
      (super.noSuchMethod(
            Invocation.getter(#isStatic),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  List<_i2.Element> get children =>
      (super.noSuchMethod(
            Invocation.getter(#children),
            returnValue: <_i2.Element>[],
            returnValueForMissingStub: <_i2.Element>[],
          )
          as List<_i2.Element>);

  @override
  _i4.AnalysisContext get context =>
      (super.noSuchMethod(
            Invocation.getter(#context),
            returnValue: _FakeAnalysisContext_3(
              this,
              Invocation.getter(#context),
            ),
            returnValueForMissingStub: _FakeAnalysisContext_3(
              this,
              Invocation.getter(#context),
            ),
          )
          as _i4.AnalysisContext);

  @override
  bool get hasAlwaysThrows =>
      (super.noSuchMethod(
            Invocation.getter(#hasAlwaysThrows),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasDeprecated =>
      (super.noSuchMethod(
            Invocation.getter(#hasDeprecated),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasDoNotStore =>
      (super.noSuchMethod(
            Invocation.getter(#hasDoNotStore),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasDoNotSubmit =>
      (super.noSuchMethod(
            Invocation.getter(#hasDoNotSubmit),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasFactory =>
      (super.noSuchMethod(
            Invocation.getter(#hasFactory),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasImmutable =>
      (super.noSuchMethod(
            Invocation.getter(#hasImmutable),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasInternal =>
      (super.noSuchMethod(
            Invocation.getter(#hasInternal),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasIsTest =>
      (super.noSuchMethod(
            Invocation.getter(#hasIsTest),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasIsTestGroup =>
      (super.noSuchMethod(
            Invocation.getter(#hasIsTestGroup),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasJS =>
      (super.noSuchMethod(
            Invocation.getter(#hasJS),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasLiteral =>
      (super.noSuchMethod(
            Invocation.getter(#hasLiteral),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasMustBeConst =>
      (super.noSuchMethod(
            Invocation.getter(#hasMustBeConst),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasMustBeOverridden =>
      (super.noSuchMethod(
            Invocation.getter(#hasMustBeOverridden),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasMustCallSuper =>
      (super.noSuchMethod(
            Invocation.getter(#hasMustCallSuper),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasNonVirtual =>
      (super.noSuchMethod(
            Invocation.getter(#hasNonVirtual),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasOptionalTypeArgs =>
      (super.noSuchMethod(
            Invocation.getter(#hasOptionalTypeArgs),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasOverride =>
      (super.noSuchMethod(
            Invocation.getter(#hasOverride),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasProtected =>
      (super.noSuchMethod(
            Invocation.getter(#hasProtected),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasRedeclare =>
      (super.noSuchMethod(
            Invocation.getter(#hasRedeclare),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasReopen =>
      (super.noSuchMethod(
            Invocation.getter(#hasReopen),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasRequired =>
      (super.noSuchMethod(
            Invocation.getter(#hasRequired),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasSealed =>
      (super.noSuchMethod(
            Invocation.getter(#hasSealed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasUseResult =>
      (super.noSuchMethod(
            Invocation.getter(#hasUseResult),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasVisibleForOverriding =>
      (super.noSuchMethod(
            Invocation.getter(#hasVisibleForOverriding),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasVisibleForTemplate =>
      (super.noSuchMethod(
            Invocation.getter(#hasVisibleForTemplate),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasVisibleForTesting =>
      (super.noSuchMethod(
            Invocation.getter(#hasVisibleForTesting),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasVisibleOutsideTemplate =>
      (super.noSuchMethod(
            Invocation.getter(#hasVisibleOutsideTemplate),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  int get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  bool get isPrivate =>
      (super.noSuchMethod(
            Invocation.getter(#isPrivate),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isPublic =>
      (super.noSuchMethod(
            Invocation.getter(#isPublic),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isSynthetic =>
      (super.noSuchMethod(
            Invocation.getter(#isSynthetic),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i5.ElementKind get kind =>
      (super.noSuchMethod(
            Invocation.getter(#kind),
            returnValue: _FakeElementKind_5(this, Invocation.getter(#kind)),
            returnValueForMissingStub: _FakeElementKind_5(
              this,
              Invocation.getter(#kind),
            ),
          )
          as _i5.ElementKind);

  @override
  _i2.LibraryElement get library =>
      (super.noSuchMethod(
            Invocation.getter(#library),
            returnValue: _FakeLibraryElement_6(
              this,
              Invocation.getter(#library),
            ),
            returnValueForMissingStub: _FakeLibraryElement_6(
              this,
              Invocation.getter(#library),
            ),
          )
          as _i2.LibraryElement);

  @override
  List<_i5.ElementAnnotation> get metadata =>
      (super.noSuchMethod(
            Invocation.getter(#metadata),
            returnValue: <_i5.ElementAnnotation>[],
            returnValueForMissingStub: <_i5.ElementAnnotation>[],
          )
          as List<_i5.ElementAnnotation>);

  @override
  int get nameLength =>
      (super.noSuchMethod(
            Invocation.getter(#nameLength),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  int get nameOffset =>
      (super.noSuchMethod(
            Invocation.getter(#nameOffset),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  _i2.Element get nonSynthetic =>
      (super.noSuchMethod(
            Invocation.getter(#nonSynthetic),
            returnValue: _FakeElement_4(this, Invocation.getter(#nonSynthetic)),
            returnValueForMissingStub: _FakeElement_4(
              this,
              Invocation.getter(#nonSynthetic),
            ),
          )
          as _i2.Element);

  @override
  _i6.Source get source =>
      (super.noSuchMethod(
            Invocation.getter(#source),
            returnValue: _FakeSource_7(this, Invocation.getter(#source)),
            returnValueForMissingStub: _FakeSource_7(
              this,
              Invocation.getter(#source),
            ),
          )
          as _i6.Source);

  @override
  _i6.Source get librarySource =>
      (super.noSuchMethod(
            Invocation.getter(#librarySource),
            returnValue: _FakeSource_7(this, Invocation.getter(#librarySource)),
            returnValueForMissingStub: _FakeSource_7(
              this,
              Invocation.getter(#librarySource),
            ),
          )
          as _i6.Source);

  @override
  bool get hasImplicitReturnType =>
      (super.noSuchMethod(
            Invocation.getter(#hasImplicitReturnType),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isAbstract =>
      (super.noSuchMethod(
            Invocation.getter(#isAbstract),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isAsynchronous =>
      (super.noSuchMethod(
            Invocation.getter(#isAsynchronous),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isAugmentation =>
      (super.noSuchMethod(
            Invocation.getter(#isAugmentation),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isExtensionTypeMember =>
      (super.noSuchMethod(
            Invocation.getter(#isExtensionTypeMember),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isExternal =>
      (super.noSuchMethod(
            Invocation.getter(#isExternal),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isGenerator =>
      (super.noSuchMethod(
            Invocation.getter(#isGenerator),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isOperator =>
      (super.noSuchMethod(
            Invocation.getter(#isOperator),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isSynchronous =>
      (super.noSuchMethod(
            Invocation.getter(#isSynchronous),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  List<_i2.ParameterElement> get parameters =>
      (super.noSuchMethod(
            Invocation.getter(#parameters),
            returnValue: <_i2.ParameterElement>[],
            returnValueForMissingStub: <_i2.ParameterElement>[],
          )
          as List<_i2.ParameterElement>);

  @override
  _i3.FunctionType get type =>
      (super.noSuchMethod(
            Invocation.getter(#type),
            returnValue: _FakeFunctionType_23(this, Invocation.getter(#type)),
            returnValueForMissingStub: _FakeFunctionType_23(
              this,
              Invocation.getter(#type),
            ),
          )
          as _i3.FunctionType);

  @override
  bool get isSimplyBounded =>
      (super.noSuchMethod(
            Invocation.getter(#isSimplyBounded),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  List<_i2.TypeParameterElement> get typeParameters =>
      (super.noSuchMethod(
            Invocation.getter(#typeParameters),
            returnValue: <_i2.TypeParameterElement>[],
            returnValueForMissingStub: <_i2.TypeParameterElement>[],
          )
          as List<_i2.TypeParameterElement>);

  @override
  bool get isConstantEvaluated =>
      (super.noSuchMethod(
            Invocation.getter(#isConstantEvaluated),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  T? accept<T>(_i2.ElementVisitor<T>? visitor) =>
      (super.noSuchMethod(
            Invocation.method(#accept, [visitor]),
            returnValueForMissingStub: null,
          )
          as T?);

  @override
  String getDisplayString({
    bool? withNullability = true,
    bool? multiline = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getDisplayString, [], {
              #withNullability: withNullability,
              #multiline: multiline,
            }),
            returnValue: _i16.dummyValue<String>(
              this,
              Invocation.method(#getDisplayString, [], {
                #withNullability: withNullability,
                #multiline: multiline,
              }),
            ),
            returnValueForMissingStub: _i16.dummyValue<String>(
              this,
              Invocation.method(#getDisplayString, [], {
                #withNullability: withNullability,
                #multiline: multiline,
              }),
            ),
          )
          as String);

  @override
  String getExtendedDisplayName(String? shortName) =>
      (super.noSuchMethod(
            Invocation.method(#getExtendedDisplayName, [shortName]),
            returnValue: _i16.dummyValue<String>(
              this,
              Invocation.method(#getExtendedDisplayName, [shortName]),
            ),
            returnValueForMissingStub: _i16.dummyValue<String>(
              this,
              Invocation.method(#getExtendedDisplayName, [shortName]),
            ),
          )
          as String);

  @override
  bool isAccessibleIn(_i2.LibraryElement? library) =>
      (super.noSuchMethod(
            Invocation.method(#isAccessibleIn, [library]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  E? thisOrAncestorMatching<E extends _i2.Element>(
    bool Function(_i2.Element)? predicate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#thisOrAncestorMatching, [predicate]),
            returnValueForMissingStub: null,
          )
          as E?);

  @override
  E? thisOrAncestorMatching3<E extends _i2.Element>(
    bool Function(_i2.Element)? predicate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#thisOrAncestorMatching3, [predicate]),
            returnValueForMissingStub: null,
          )
          as E?);

  @override
  void visitChildren(_i2.ElementVisitor<dynamic>? visitor) =>
      super.noSuchMethod(
        Invocation.method(#visitChildren, [visitor]),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DartType].
///
/// See the documentation for Mockito's code generation for more information.
class MockDartType extends _i1.Mock implements _i3.DartType {
  @override
  _i3.DartType get extensionTypeErasure =>
      (super.noSuchMethod(
            Invocation.getter(#extensionTypeErasure),
            returnValue: _FakeDartType_10(
              this,
              Invocation.getter(#extensionTypeErasure),
            ),
            returnValueForMissingStub: _FakeDartType_10(
              this,
              Invocation.getter(#extensionTypeErasure),
            ),
          )
          as _i3.DartType);

  @override
  bool get isBottom =>
      (super.noSuchMethod(
            Invocation.getter(#isBottom),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartAsyncFuture =>
      (super.noSuchMethod(
            Invocation.getter(#isDartAsyncFuture),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartAsyncFutureOr =>
      (super.noSuchMethod(
            Invocation.getter(#isDartAsyncFutureOr),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartAsyncStream =>
      (super.noSuchMethod(
            Invocation.getter(#isDartAsyncStream),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreBool =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreBool),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreDouble =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreDouble),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreEnum =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreEnum),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreFunction =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreFunction),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreInt =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreInt),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreIterable =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreIterable),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreList =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreList),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreMap =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreMap),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreNull =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreNull),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreNum =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreNum),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreObject =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreObject),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreRecord =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreRecord),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreSet =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreSet),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreString =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreString),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreSymbol =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreSymbol),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDartCoreType =>
      (super.noSuchMethod(
            Invocation.getter(#isDartCoreType),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i17.NullabilitySuffix get nullabilitySuffix =>
      (super.noSuchMethod(
            Invocation.getter(#nullabilitySuffix),
            returnValue: _i17.NullabilitySuffix.question,
            returnValueForMissingStub: _i17.NullabilitySuffix.question,
          )
          as _i17.NullabilitySuffix);

  @override
  R accept<R>(_i23.TypeVisitor<R>? visitor) =>
      (super.noSuchMethod(
            Invocation.method(#accept, [visitor]),
            returnValue: _i16.dummyValue<R>(
              this,
              Invocation.method(#accept, [visitor]),
            ),
            returnValueForMissingStub: _i16.dummyValue<R>(
              this,
              Invocation.method(#accept, [visitor]),
            ),
          )
          as R);

  @override
  R acceptWithArgument<R, A>(
    _i23.TypeVisitorWithArgument<R, A>? visitor,
    A? argument,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#acceptWithArgument, [visitor, argument]),
            returnValue: _i16.dummyValue<R>(
              this,
              Invocation.method(#acceptWithArgument, [visitor, argument]),
            ),
            returnValueForMissingStub: _i16.dummyValue<R>(
              this,
              Invocation.method(#acceptWithArgument, [visitor, argument]),
            ),
          )
          as R);

  @override
  _i3.InterfaceType? asInstanceOf(_i2.InterfaceElement? element) =>
      (super.noSuchMethod(
            Invocation.method(#asInstanceOf, [element]),
            returnValueForMissingStub: null,
          )
          as _i3.InterfaceType?);

  @override
  _i3.InterfaceType? asInstanceOf2(_i5.InterfaceElement2? element) =>
      (super.noSuchMethod(
            Invocation.method(#asInstanceOf2, [element]),
            returnValueForMissingStub: null,
          )
          as _i3.InterfaceType?);

  @override
  String getDisplayString({bool? withNullability = true}) =>
      (super.noSuchMethod(
            Invocation.method(#getDisplayString, [], {
              #withNullability: withNullability,
            }),
            returnValue: _i16.dummyValue<String>(
              this,
              Invocation.method(#getDisplayString, [], {
                #withNullability: withNullability,
              }),
            ),
            returnValueForMissingStub: _i16.dummyValue<String>(
              this,
              Invocation.method(#getDisplayString, [], {
                #withNullability: withNullability,
              }),
            ),
          )
          as String);

  @override
  bool isStructurallyEqualTo(_i3.DartType? other) =>
      (super.noSuchMethod(
            Invocation.method(#isStructurallyEqualTo, [other]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);
}

/// A class which mocks [ElementAnnotation].
///
/// See the documentation for Mockito's code generation for more information.
class MockElementAnnotation extends _i1.Mock implements _i5.ElementAnnotation {
  @override
  bool get isAlwaysThrows =>
      (super.noSuchMethod(
            Invocation.getter(#isAlwaysThrows),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDeprecated =>
      (super.noSuchMethod(
            Invocation.getter(#isDeprecated),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDoNotStore =>
      (super.noSuchMethod(
            Invocation.getter(#isDoNotStore),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isDoNotSubmit =>
      (super.noSuchMethod(
            Invocation.getter(#isDoNotSubmit),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isFactory =>
      (super.noSuchMethod(
            Invocation.getter(#isFactory),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isImmutable =>
      (super.noSuchMethod(
            Invocation.getter(#isImmutable),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isInternal =>
      (super.noSuchMethod(
            Invocation.getter(#isInternal),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isIsTest =>
      (super.noSuchMethod(
            Invocation.getter(#isIsTest),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isIsTestGroup =>
      (super.noSuchMethod(
            Invocation.getter(#isIsTestGroup),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isJS =>
      (super.noSuchMethod(
            Invocation.getter(#isJS),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isLiteral =>
      (super.noSuchMethod(
            Invocation.getter(#isLiteral),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isMustBeConst =>
      (super.noSuchMethod(
            Invocation.getter(#isMustBeConst),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isMustBeOverridden =>
      (super.noSuchMethod(
            Invocation.getter(#isMustBeOverridden),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isMustCallSuper =>
      (super.noSuchMethod(
            Invocation.getter(#isMustCallSuper),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isNonVirtual =>
      (super.noSuchMethod(
            Invocation.getter(#isNonVirtual),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isOptionalTypeArgs =>
      (super.noSuchMethod(
            Invocation.getter(#isOptionalTypeArgs),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isOverride =>
      (super.noSuchMethod(
            Invocation.getter(#isOverride),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isProtected =>
      (super.noSuchMethod(
            Invocation.getter(#isProtected),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isProxy =>
      (super.noSuchMethod(
            Invocation.getter(#isProxy),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isRedeclare =>
      (super.noSuchMethod(
            Invocation.getter(#isRedeclare),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isReopen =>
      (super.noSuchMethod(
            Invocation.getter(#isReopen),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isRequired =>
      (super.noSuchMethod(
            Invocation.getter(#isRequired),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isSealed =>
      (super.noSuchMethod(
            Invocation.getter(#isSealed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isTarget =>
      (super.noSuchMethod(
            Invocation.getter(#isTarget),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isUseResult =>
      (super.noSuchMethod(
            Invocation.getter(#isUseResult),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isVisibleForOverriding =>
      (super.noSuchMethod(
            Invocation.getter(#isVisibleForOverriding),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isVisibleForTemplate =>
      (super.noSuchMethod(
            Invocation.getter(#isVisibleForTemplate),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isVisibleForTesting =>
      (super.noSuchMethod(
            Invocation.getter(#isVisibleForTesting),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isVisibleOutsideTemplate =>
      (super.noSuchMethod(
            Invocation.getter(#isVisibleOutsideTemplate),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isWidgetFactory =>
      (super.noSuchMethod(
            Invocation.getter(#isWidgetFactory),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i5.LibraryFragment get libraryFragment =>
      (super.noSuchMethod(
            Invocation.getter(#libraryFragment),
            returnValue: _FakeLibraryFragment_24(
              this,
              Invocation.getter(#libraryFragment),
            ),
            returnValueForMissingStub: _FakeLibraryFragment_24(
              this,
              Invocation.getter(#libraryFragment),
            ),
          )
          as _i5.LibraryFragment);

  @override
  _i4.AnalysisContext get context =>
      (super.noSuchMethod(
            Invocation.getter(#context),
            returnValue: _FakeAnalysisContext_3(
              this,
              Invocation.getter(#context),
            ),
            returnValueForMissingStub: _FakeAnalysisContext_3(
              this,
              Invocation.getter(#context),
            ),
          )
          as _i4.AnalysisContext);

  @override
  bool get isConstantEvaluated =>
      (super.noSuchMethod(
            Invocation.getter(#isConstantEvaluated),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  String toSource() =>
      (super.noSuchMethod(
            Invocation.method(#toSource, []),
            returnValue: _i16.dummyValue<String>(
              this,
              Invocation.method(#toSource, []),
            ),
            returnValueForMissingStub: _i16.dummyValue<String>(
              this,
              Invocation.method(#toSource, []),
            ),
          )
          as String);
}

/// A class which mocks [AnnotationChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnnotationChecker extends _i1.Mock implements _i24.AnnotationChecker {
  @override
  bool hasObjectIdConverter(_i2.ParameterElement? element) =>
      (super.noSuchMethod(
            Invocation.method(#hasObjectIdConverter, [element]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool hasJsonKeyWithId(_i2.ParameterElement? element) =>
      (super.noSuchMethod(
            Invocation.method(#hasJsonKeyWithId, [element]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);
}
